@page "/settings/theme-mode"
@inject AppIntegrationService AppIntegrationService

<PStackPageBarInit Title="颜色主题"></PStackPageBarInit>

<MList Class="rounded mb-3">
    <MListItem ThreeLine>
        <MListItemContent>
            <MListItemTitle>跟随系统</MListItemTitle>
            <MListItemSubtitle>
                启用后将匹配系统设置
            </MListItemSubtitle>
        </MListItemContent>
        <MListItemAction>
            <MSwitch Inset
                     Dense
                     Value="@(theme == 0)"
                     ValueChanged="AutoChanged"
                     TValue="bool">
            </MSwitch>
        </MListItemAction>
    </MListItem>
</MList>
@if (theme != 0)
{
    <MList Class="rounded">
        <MListItemGroup Color="primary"
                        Mandatory
                        Value="theme"
                        ValueChanged="@ToggleTheme">
            <MListItem Value="1">
                <ItemContent>
                    <MListItemContent>
                        <MListItemTitle>浅色模式</MListItemTitle>
                    </MListItemContent>
                    <MListItemAction>
                        <FadeTransition>
                            <MIcon If="@context.Active">mdi-check</MIcon>
                        </FadeTransition>
                    </MListItemAction>
                </ItemContent>
            </MListItem>
            <MListItem Value="2">
                <ItemContent>
                    <MListItemContent>
                        <MListItemTitle>暗黑模式</MListItemTitle>
                    </MListItemContent>
                    <MListItemAction>
                        <FadeTransition>
                            <MIcon If="@context.Active">mdi-check</MIcon>
                        </FadeTransition>
                    </MListItemAction>
                </ItemContent>
            </MListItem>
        </MListItemGroup>
    </MList>
}

@code {

    // 0: Auto, 1: Light, 2: Dark
    private int theme;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            theme = await AppIntegrationService.GetThemeAsync();
            StateHasChanged();
        }
    }

    private async Task AutoChanged(bool val)
    {
        if (val)
        {
            theme = 0;
        }
        else
        {
            var isDark = await AppIntegrationService.IsThemeOfSystemAsync();
            theme = isDark ? 2 : 1;
        }

        await AppIntegrationService.SetThemeAsync(theme);
    }

    private void ToggleTheme(StringNumber val)
    {
        var value = val.AsT1;
        theme = value;
        Console.Out.WriteLine("[DarkMode] Toggle theme: " + value);
        AppIntegrationService.SetThemeAsync(value);
    }

}